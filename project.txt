Pet Simulator – OOP Project

Project Goal:

Create a pet simulator where you will work with different types of animals (dog, cat, parrot…),
each with its own attributes (hunger, energy, happiness), methods (feed, play, sleep),
random events (illness, fatigue), and you'll handle errors using exceptions.


Lesson 1 – Introduction to OOP, First Class: Pet
Create a basic class called Pet with the following attributes:
name (string),
hunger (number, range 0–100),
energy (number, range 0–100).
Write the __init__ constructor method.
Create at least one instance and print its attributes.

UPDATE-01:
add happiness to attributes

Instance Methods, Changing Pet State
Add the following methods to your Pet class:
feed() – decreases hunger
play() – decreases energy and increases happiness
sleep() – increases energy

Modify the methods so that they update the instance's attributes accordingly.
Test calling these methods on an instance of the class.

UPDATE-02:
Add an attribute named abilities or instincts, which should be a list type, as an animal can have multiple instincts.

Add a __str__() method for a nicely formatted display of the pet's information.
Set default values for the attributes in the __init__ method if they are not provided.

Create an example where hunger and energy are not given, and the default values are used.


Lesson 2

Encapsulation and @property:

Mark the attributes as "private".
Create @property and @setter methods for safely changing the hunger and energy levels (e.g., values must stay between 0 and 100).
Handle errors when invalid values are provided.


Inheritance – Specific Pet Types
Create classes Dog, Cat, and Parrot that inherit from Pet.
Each type should have a specific method, e.g., make_sound(), with different outputs.
Use super() in the constructors.


Polymorphism and isinstance()
Create a list of pets from different classes.
Write a function that calls make_sound() on each one.
Use isinstance() to distinguish specific actions (e.g., a parrot can repeat words).

Modules and import:
Try to logically divide the classes into modules.


Lesson 3 – Exception Handling and Random Events

- Add Error Handling (Exception Handling)
You can add custom exceptions like InvalidHungerValueError, InvalidEnergyValueError, etc., to handle any errors that arise when attributes like hunger or energy fall outside of their valid ranges.

For instance, if someone tries to set a pet's hunger to 150, you'd raise an exception.

Introduce Random Events
Illness: Implement a random chance that a pet could get sick (e.g., a random event that decreases energy or happiness).

Fatigue: Add fatigue events that cause the pet to need extra sleep or have their energy drop.

Create a Random Event Generator
Use Python's random library to create random events that can affect the pet's attributes.


Database Design for Storing Pet States and Logging Activities
To maintain a record of pets' states (like hunger, energy, and happiness) and track their activities (such as feeding, playing,
or events like illness and fatigue), you should design a database that can store this data efficiently.
f.e. - table pets, activities_log

Lesson 4 – Pet Statistics & Console Menu

In this lesson, you will extend your Pet Simulator with two main features:
1. Track Pet Statistics
Add a new stats dictionary attribute to your Pet class to track how many times the pet:
- was fed
- played
- slept
- got sick
- experienced fatigue

Update the existing feed(), play(), and sleep() methods to increment these counters.
Also update your random event generator to increase the counters for illness and fatigue.
Add a method show_stats() that prints the pet’s statistics in a clear format.

2. Create a Console Menu (using inquirer)
Install the inquirer library (pip install inquirer).
Create a console menu that allows the user to:
- Feed the pet
- Play with the pet
- Let the pet sleep

Advance to the next day (trigger random events)

Show current pet status
Show pet statistics
Exit the program

After each action, display the current state or stats of the pet.

Optional: Let the user manage multiple pets and choose which one to interact with.

Lesson 5 - Actions:

Create an action YAML file that will trigger on a push event. It should also run basic tests and perform a flake check to ensure everything is in top shape.

Lesson 6 - addons:
Here is the translation to English:

1. The program can be ended at any step in the menu, and it is also possible to go back one step.
2. When fed, energy should also be added.
3. When I give it sleep, randomly subtract or add happiness.
4. In pet.py, adjust the outputs so that the values are not hardcoded.
5. Next day -> random events 1-3 times, but the same event cannot occur again; if the pet gets sick, no more events can happen.
6. Missing the creation of the pet at the beginning.
7. It is possible to load the pet from the database.

