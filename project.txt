Pet Simulator – OOP Project

Project Goal:

Create a pet simulator where you will work with different types of animals (dog, cat, parrot…),
each with its own attributes (hunger, energy, happiness), methods (feed, play, sleep),
random events (illness, fatigue), and you'll handle errors using exceptions.


Lesson 1 – Introduction to OOP, First Class: Pet
Create a basic class called Pet with the following attributes:
name (string),
hunger (number, range 0–100),
energy (number, range 0–100).
Write the __init__ constructor method.
Create at least one instance and print its attributes.

UPDATE-01:
add happiness to attributes

Instance Methods, Changing Pet State
Add the following methods to your Pet class:
feed() – decreases hunger
play() – decreases energy and increases happiness
sleep() – increases energy

Modify the methods so that they update the instance's attributes accordingly.
Test calling these methods on an instance of the class.

UPDATE-02:
Add an attribute named abilities or instincts, which should be a list type, as an animal can have multiple instincts.

Add a __str__() method for a nicely formatted display of the pet's information.
Set default values for the attributes in the __init__ method if they are not provided.

Create an example where hunger and energy are not given, and the default values are used.


Lesson 2

Encapsulation and @property:

Mark the attributes as "private".
Create @property and @setter methods for safely changing the hunger and energy levels (e.g., values must stay between 0 and 100).
Handle errors when invalid values are provided.


Inheritance – Specific Pet Types
Create classes Dog, Cat, and Parrot that inherit from Pet.
Each type should have a specific method, e.g., make_sound(), with different outputs.
Use super() in the constructors.


Polymorphism and isinstance()
Create a list of pets from different classes.
Write a function that calls make_sound() on each one.
Use isinstance() to distinguish specific actions (e.g., a parrot can repeat words).

Modules and import:
Try to logically divide the classes into modules.





